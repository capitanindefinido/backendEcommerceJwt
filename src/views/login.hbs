<h1 class="text-center">login</h1>
<div class="container" >
    <div class="d-flex justify-content-center align-item-center">
        <form class="w-25" id="registerForm">
            <label for="email">Email</label>
            <input class="form-control" type="text" name="email" placeholder="ingresar el email">
            <label for="password">Password</label>
            <input class="form-control" type="text" name="password" placeholder="ingresar el password">
            <br>
            <button class="btn btn-outline-dark w-100">Enviar</button>
        </form>        
    </div>
    {{!-- estrategia de github --}}
    <div class="d-flex justify-content-center align-item-center">
        <a class="w-25 pt-2" href="/api/sessions/github">
            <button class="btn btn-dark w-100">Github</button>
        </a>
    </div>
    <a href="/register">Registrarme</a>
    <br>
    <a href="/forgot-password">Forgot password</a>
    <br>
    <form id="logoutForm" action="/api/sessions/logout" method="post">
        <button type="submit" class="btn btn-outline-dark w-100">Logout</button>
    </form>


</div>

<script>
    const form = document.querySelector('#registerForm')
    form.addEventListener('submit', event => {
        event.preventDefault();
        const formData = new FormData(form)
        const data = Object.fromEntries(formData)
        // console.log(data)

        fetch('/api/sessions/login', {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
                //'Authorization': 'Bearer ' + localStorage.getItem('authToken')
            }
        })
        .then(response => response.json())
        .then((data) => {
            if (data.status === 'success') {
                Toastify({
                    text: 'Login exitoso. ¡Bienvenido!',
                    duration: 3000, // Duración del mensaje en milisegundos
                    gravity: 'top', // Posición del mensaje
                    position: 'right', // Ubicación del mensaje
                    backgroundColor: 'blue', // Color de fondo del mensaje
                }).showToast();

                setTimeout(() => {
                    window.location.href = '/'; 
                }, 3000); 
                // Puedes redirigir a la página principal o a la que desees
            } else if (data.status === 'error' && data.error === 'Usuario no existe') {
                window.location.href = '/register'; // Redirige a la página de registro si el usuario no existe
            }
        }).catch((error) => {
            console.log(error.message)
        })
    })

    const logoutForm = document.getElementById('logoutForm');

    logoutForm.addEventListener('submit', event => {
        event.preventDefault();

        fetch('/api/sessions/logout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => response.json())
        .then((data) => {
            if (data.status === 'success') {
                // Realizar acciones adicionales después del logout si es necesario
                Toastify({
                    text: 'Sesion cerrada con éxito. Vuelve pronto!',
                    duration: 3000, // Duración del mensaje en milisegundos
                    gravity: 'top', // Posición del mensaje
                    position: 'right', // Ubicación del mensaje
                    backgroundColor: 'black', // Color de fondo del mensaje
                }).showToast();

                setTimeout(() => {
                    window.location.href = '/';
                }, 3000); 
            } else {
                console.log('Error en el logout:', data.body);
                Toastify({
                    text: 'No hay ninguina sesión abierta, inicie sesión o regístrese',
                    duration: 3000, // Duración del mensaje en milisegundos
                    gravity: 'top', // Posición del mensaje
                    position: 'right', // Ubicación del mensaje
                    backgroundColor: 'black', // Color de fondo del mensaje
                }).showToast();
            }
        })
        .catch((error) => {
            console.log('Error en el logout:', error.message);
        });
    });
</script>